{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red4\green4\blue4;}
{\*\expandedcolortbl;;\cspthree\c1239\c1239\c1239;}
\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs22 \cf2 import java.io.IOException;\
import java.util.HashMap;\
import java.util.StringTokenizer;\
import \ul org.apache\ulnone .hadoop.conf.Configuration;\
import \ul org.apache\ulnone .hadoop.fs.Path;\
import \ul org.apache\ulnone .hadoop.io.IntWritable;\
import \ul org.apache\ulnone .hadoop.io.LongWritable;\
import \ul org.apache\ulnone .hadoop.io.Text;\
import \ul org.apache\ulnone .hadoop.mapreduce.Job;\
import \ul org.apache\ulnone .hadoop.mapreduce.Mapper;\
import \ul org.apache\ulnone .hadoop.mapreduce.Reducer;\
import \ul org.apache\ulnone .hadoop.mapreduce.lib.input.FileInputFormat;\
import \ul org.apache\ulnone .hadoop.mapreduce.lib.output.FileOutputFormat;\
public class \ul WordDriver\ulnone \{\
        public static class InvertedMapper extends \ul Mapper\ulnone <\ul LongWritable\ulnone , \ul Text\ulnone , \ul Text\ulnone , \ul Text\ulnone >\
        \{\
                private \ul Text\ulnone  word = new \ul Text\ulnone ();\
                public void map(\ul LongWritable\ulnone  key, \ul Text\ulnone  value, \ul Context\ulnone  context) throws IOException, InterruptedException\
                \{\
                   String line = value.toString();\
                   String arr[] = line.split("\\t", 2);\
                   \ul Text\ulnone  outputValue = new \ul Text\ulnone (arr[0]);\
                   StringTokenizer str = new StringTokenizer(arr[1]);\
                   while(str.hasMoreTokens())\
                   \{\
                    \ul word\ulnone .set(str.nextToken());\
                    context.write(\ul word\ulnone , outputValue);\
                   \}\
                \}\
        \}\
        public static class InvertedReducer extends \ul Reducer\ulnone <\ul Text\ulnone , \ul Text\ulnone , \ul Text\ulnone , \ul Text\ulnone >\
        \{\
                public void reduce(\ul Text\ulnone  key, Iterable<\ul Text\ulnone > values, \ul Context\ulnone  context) throws IOException, InterruptedException\
                \{\
                         HashMap<String, Integer> counter = \ul new HashMap()\ulnone ;\
                         for(\ul Text\ulnone  val: values)\
                         \{\
                                String value = val.toString();\
                                if(counter.containsKey(value))\
                                 \{\
                                        int t = counter.get(value);\
                                        t += 1;\
                                        counter.put(value, new Integer(t));\
                                 \}else\{\
                                         counter.put(value,  new Integer(1));\
                                         \}\
                         \}\
                         StringBuilder sb = new StringBuilder("");\
                         for(String x: counter.keySet())\
                         \{\
                                 sb.append(x+":"+counter.get(x)+" ");\
                         \}\
                         \ul Text\ulnone  outputValue = new \ul Text\ulnone (sb.toString());\
                         context.write(key, outputValue);\
                \}\
        \}\
        public static void main(String args[]) throws IOException, InterruptedException, ClassNotFoundException\
        \{\
                if(args.length < 2)\
                \{\
                        System.out.println(\'93Insufficient Arguments\'94);\
                \}else\{\
                        \ul Configuration\ulnone  c = new \ul Configuration\ulnone ();\
                        \ul Job\ulnone  j = \ul Job\ulnone .getInstance(c, "word count");\
                        j.setJarByClass(WordDriver.class);\
                        j.setMapperClass(InvertedMapper.class);\
                        j.setReducerClass(InvertedReducer.class);\
                        j.setMapOutputKeyClass(\ul Text\ulnone .class);\
                        j.setMapOutputValueClass(\ul Text\ulnone .class);\
                        j.setOutputKeyClass(\ul Text\ulnone .class);\
                        j.setOutputValueClass(\ul Text\ulnone .class);\
                        \ul FileInputFormat\ulnone .addInputPath(j, new \ul Path\ulnone (args[0]));\
                        \ul FileOutputFormat\ulnone .setOutputPath(j, new \ul Path\ulnone (args[1]));\
                        System.exit(j.waitForCompletion(true)? 0 : 1);\
                \}\
        \}\
\}\
}